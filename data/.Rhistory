MWAS_spectrumNMR = function(metabo_vector, ppm, pvalues, estimates,
alpha_th = 0.05, xlab = "ppm", ylab = "intensity",
scale_color = c("black", "cornflowerblue", "firebrick1"),
size_lab = 12, size_axis = 12, xlim = NULL, ylim = NULL,
guide_type = "legend", xbreaks = waiver(), xnames = waiver(),
ybreaks = waiver(), ynames = waiver()) {
## Check that the input data are correct
if ((is.vector(pvalues) & is.vector(estimates) & is.vector(ppm) &
is.vector(metabo_vector)) == FALSE) {
stop("Arguments: metabo_vector, pvalues, estimates and ppm, must be numeric vectors")
}
if (length(pvalues) != length(estimates) | length(pvalues) !=
length(ppm) | length(pvalues) != length(metabo_vector)) {
stop("Arguments: metabo_vector, pvalues, estimates and ppm, must have the same length")
}
if (length(scale_color) != 3) {
stop("scale_color must have 3 color values")
}
scores = unlist(mapply(SK_scores, pvalues, estimates, SIMPLIFY = FALSE))
assoc_scale = as.numeric(sapply(scores, sig_color, alpha_th = alpha_th))
nb = sort(as.numeric(unique(assoc_scale)), decreasing = FALSE)
legend_labels = as.character(nb)
legend_labels[legend_labels == "0"] = "unchanged"
legend_labels[legend_labels == "1"] = "downregulated"
legend_labels[legend_labels == "2"] = "upregulated"
col_breaks = nb
col_breaks[col_breaks == 0] = scale_color[1]
col_breaks[col_breaks == 1] = scale_color[2]
col_breaks[col_breaks == 2] = scale_color[3]
# Plot spectrum
options(warn = -1)
figure_spectrum = qplot(ppm, metabo_vector, geom = "line",
colour = assoc_scale) + scale_colour_gradientn(colours = col_breaks,
breaks = nb, space = "Lab", guide = guide_type, labels = legend_labels) +
scale_x_reverse(lim = xlim, breaks = xbreaks, labels = xnames) +
scale_y_continuous(lim = ylim, breaks = ybreaks, labels = ynames) +
theme_bw() + labs(x = xlab, y = ylab) + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.text = element_text(size = size_axis),
axis.title = element_text(size = size_lab), axis.title.y = element_text(vjust = 0),
axis.title.x = element_text(vjust = 0))
plot(figure_spectrum)
options(warn = 1)
}
MWAS_spectrumNMR(QC_data[1,], ppm, MWAS_unadjusted[,3], MWAS_unadjusted[,1])
### MWAS_SigSpecNMR ####
MWAS_spectrumNMR = function(metabo_vector, ppm, pvalues, estimates,
alpha_th = 0.05, xlab = "ppm", ylab = "intensity",
scale_color = c("black", "cornflowerblue", "firebrick1"),
size_lab = 12, size_axis = 12, xlim = NULL, ylim = NULL,
guide_type = "legend", xbreaks = waiver(), xnames = waiver(),
ybreaks = waiver(), ynames = waiver()) {
## Check that the input data are correct
if ((is.vector(pvalues) & is.vector(estimates) & is.vector(ppm) &
is.vector(metabo_vector)) == FALSE) {
stop("Arguments: metabo_vector, pvalues, estimates and ppm, must be numeric vectors")
}
if (length(pvalues) != length(estimates) | length(pvalues) !=
length(ppm) | length(pvalues) != length(metabo_vector)) {
stop("Arguments: metabo_vector, pvalues, estimates and ppm, must have the same length")
}
if (length(scale_color) != 3) {
stop("scale_color must have 3 color values")
}
scores = unlist(mapply(SK_scores, pvalues, estimates, SIMPLIFY = FALSE))
assoc_type = as.numeric(sapply(scores, sig_color, alpha_th = alpha_th))
nb = sort(as.numeric(unique(assoc_type)), decreasing = FALSE)
legend_labels = as.character(nb)
legend_labels[legend_labels == "0"] = "unchanged"
legend_labels[legend_labels == "1"] = "downregulated"
legend_labels[legend_labels == "2"] = "upregulated"
col_breaks = nb
col_breaks[col_breaks == 0] = scale_color[1]
col_breaks[col_breaks == 1] = scale_color[2]
col_breaks[col_breaks == 2] = scale_color[3]
# Plot spectrum
options(warn = -1)
figure_spectrum = qplot(ppm, metabo_vector, geom = "line",
colour = assoc_type) + scale_colour_gradientn(colours = col_breaks,
breaks = nb, space = "Lab", guide = guide_type, labels = legend_labels) +
scale_x_reverse(lim = xlim, breaks = xbreaks, labels = xnames) +
scale_y_continuous(lim = ylim, breaks = ybreaks, labels = ynames) +
theme_bw() + labs(x = xlab, y = ylab) + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.text = element_text(size = size_axis),
axis.title = element_text(size = size_lab), axis.title.y = element_text(vjust = 0),
axis.title.x = element_text(vjust = 0))
plot(figure_spectrum)
options(warn = 1)
}
MWAS_spectrumNMR(QC_data[1,], ppm, MWAS_unadjusted[,3], MWAS_unadjusted[,1])
### MWAS_SigSpecNMR ####
MWAS_spectrumNMR = function(metabo_vector, ppm, pvalues, estimates,
alpha_th = 0.05, xlab = "ppm", ylab = "intensity",
scale_color = c("black", "cornflowerblue", "firebrick1"),
size_lab = 12, size_axis = 12, xlim = NULL, ylim = NULL,
guide_type = "legend", xbreaks = waiver(), xnames = waiver(),
ybreaks = waiver(), ynames = waiver()) {
## Check that the input data are correct
if ((is.vector(pvalues) & is.vector(estimates) & is.vector(ppm) &
is.vector(metabo_vector)) == FALSE) {
stop("Arguments: metabo_vector, pvalues, estimates and ppm, must be numeric vectors")
}
if (length(pvalues) != length(estimates) | length(pvalues) !=
length(ppm) | length(pvalues) != length(metabo_vector)) {
stop("Arguments: metabo_vector, pvalues, estimates and ppm, must have the same length")
}
if (length(scale_color) != 3) {
stop("scale_color must have 3 color values")
}
scores = unlist(mapply(SK_scores, pvalues, estimates, SIMPLIFY = FALSE))
assoc = as.numeric(sapply(scores, sig_color, alpha_th = alpha_th))
nb = sort(as.numeric(unique(assoc)), decreasing = FALSE)
legend_labels = as.character(nb)
legend_labels[legend_labels == "0"] = "unchanged"
legend_labels[legend_labels == "1"] = "downregulated"
legend_labels[legend_labels == "2"] = "upregulated"
col_breaks = nb
col_breaks[col_breaks == 0] = scale_color[1]
col_breaks[col_breaks == 1] = scale_color[2]
col_breaks[col_breaks == 2] = scale_color[3]
# Plot spectrum
options(warn = -1)
figure_spectrum = qplot(ppm, metabo_vector, geom = "line",
colour = assoc) + scale_colour_gradientn(colours = col_breaks,
breaks = nb, space = "Lab", guide = guide_type, labels = legend_labels) +
scale_x_reverse(lim = xlim, breaks = xbreaks, labels = xnames) +
scale_y_continuous(lim = ylim, breaks = ybreaks, labels = ynames) +
theme_bw() + labs(x = xlab, y = ylab) + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.text = element_text(size = size_axis),
axis.title = element_text(size = size_lab), axis.title.y = element_text(vjust = 0),
axis.title.x = element_text(vjust = 0))
plot(figure_spectrum)
options(warn = 1)
}
MWAS_spectrumNMR(QC_data[1,], ppm, MWAS_unadjusted[,3], MWAS_unadjusted[,1])
MWAS_adjusted = MWAS_stats(target_metabolites, clinical_data[,4], CF_matrix = clinical_data[,-4],
assoc_method = "spearman", mt_method = "BH", output = "pvalues",
metabo_ids = colnames(target_metabolites))
MWAS_adjusted
args(MWAS_barplot)
MWAS_adjusted = MWAS_stats(metabolic_data, clinical_data[,4], CF_matrix = clinical_data[,-4],
assoc_method = "spearman", mt_method = "BH", output = "pvalues",
metabo_ids = colnames(metabolic_data), CV_metabo = metabo_CV)
MWAS_adjusted2 = MWAS_stats(target_metabolites, clinical_data[,4], CF_matrix = clinical_data[,-4],
assoc_method = "spearman", mt_method = "BH", output = "pvalues",
metabo_ids = colnames(target_metabolites))
MWAS_barplot(MWAS_ajusted2[,3],MWAS_adjusted[,1],metabo_ids = colnames(target_metabolites))
MWAS_barplot(MWAS_adjusted2[,3],MWAS_addjusted[,1],metabo_ids = colnames(target_metabolites))
MWAS_barplot(MWAS_adjusted2[,3],MWAS_adjusted[,1],metabo_ids = colnames(target_metabolites))
MWAS_adjusted2[,3]
MWAS_adjusted[,1]
MWAS_barplot(MWAS_adjusted2[,3],MWAS_adjusted2[,1],metabo_ids = colnames(target_metabolites))
args(MWAS_barplot)
MWAS_barplot(MWAS_adjusted2[,3],MWAS_adjusted2[,1],metabo_ids = colnames(target_metabolites),
size_ylab = 14)
MWAS_barplot(MWAS_adjusted2[,3],MWAS_adjusted2[,1],metabo_ids = colnames(target_metabolites),
size_ylab = 16)
MWAS_barplot(MWAS_adjusted2[,3],MWAS_adjusted2[,1],metabo_ids = colnames(target_metabolites),
size_ylab = 40)
### MWAS_barplot ####
MWAS_barplot = function(pvalues, estimates, metabo_ids = NULL, alpha_th = 0.05,
scale_color = c("darkgray", "cornflowerblue", "firebrick1"),
legend_labs = c("unchanged", "downregulated", "upregulated"),
ylab = "sign*log(pval)", size_yaxis = 12, size_ylab = 12,
size_names = 10, angle_names = 45) {
# Check that input data are correct
if ((is.vector(pvalues) & is.vector(estimates)) == FALSE) {
stop("Arguments: pvalues and estimates, must be numeric vectors")
}
if (is.null(metabo_ids)) {
metabo_ids = paste("metabo", 1:length(pvalues), sep = "")
}
if (length(pvalues) != length(estimates) | length(pvalues) != length(metabo_ids)) {
stop("Aarguments: pvalues, estimates and metabo_ids, must have the same length")
}
## Get scores and color scale
scores = unlist(mapply(SK_scores, pvalues, estimates, SIMPLIFY = FALSE))
names(scores) = metabo_ids
scores_col = sapply(scores, SK_color, scale_color = scale_color, alpha_th = alpha_th)
col_ref = scores_col
col_ref[col_ref == scale_color[1]] = legend_labs[1]
col_ref[col_ref == scale_color[2]] = legend_labs[2]
col_ref[col_ref == scale_color[3]] = legend_labs[3]
scores_col_values = unique(scores_col)
names(scores_col_values) = unique(col_ref)
scoresM = data.frame(assoc = factor(col_ref), metabo_ids = factor(metabo_ids),
scores = scores)
## Do barplot
figure_barplot = ggplot(data = scoresM, aes(x = metabo_ids, y = scores, fill = assoc)) +
geom_bar(stat = "identity", position = position_dodge()) +
scale_fill_manual(values = scores_col_values) + theme_bw() +
labs(x = " ", y = ylab, size = size_ylab) + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.text = element_text(size = size_yaxis),
axis.text.x = element_text(angle = angle_names, hjust = 1,
size = size_names), axis.title = element_text(size = size_names),
axis.title.y = element_text(vjust = 0), axis.title.x = element_text(vjust = 0))
plot(figure_barplot)
}
MWAS_barplot(MWAS_adjusted2[,3],MWAS_adjusted2[,1],metabo_ids = colnames(target_metabolites),
size_ylab = 40)
MWAS_barplot(MWAS_adjusted2[,3],MWAS_adjusted2[,1],metabo_ids = colnames(target_metabolites),
size_yaxis = 40)
MWAS_barplot(MWAS_adjusted2[,3],MWAS_adjusted2[,1],metabo_ids = colnames(target_metabolites),
size_yaxis = 12)
### MWAS_barplot ####
MWAS_barplot = function(pvalues, estimates, metabo_ids = NULL, alpha_th = 0.05,
scale_color = c("darkgray", "cornflowerblue", "firebrick1"),
legend_labs = c("unchanged", "downregulated", "upregulated"),
ylab = "sign*log(pval)", size_yaxis = 12, size_ylab = 12,
size_names = 10, angle_names = 45) {
# Check that input data are correct
if ((is.vector(pvalues) & is.vector(estimates)) == FALSE) {
stop("Arguments: pvalues and estimates, must be numeric vectors")
}
if (is.null(metabo_ids)) {
metabo_ids = paste("metabo", 1:length(pvalues), sep = "")
}
if (length(pvalues) != length(estimates) | length(pvalues) != length(metabo_ids)) {
stop("Aarguments: pvalues, estimates and metabo_ids, must have the same length")
}
## Get scores and color scale
scores = unlist(mapply(SK_scores, pvalues, estimates, SIMPLIFY = FALSE))
names(scores) = metabo_ids
scores_col = sapply(scores, SK_color, scale_color = scale_color, alpha_th = alpha_th)
col_ref = scores_col
col_ref[col_ref == scale_color[1]] = legend_labs[1]
col_ref[col_ref == scale_color[2]] = legend_labs[2]
col_ref[col_ref == scale_color[3]] = legend_labs[3]
scores_col_values = unique(scores_col)
names(scores_col_values) = unique(col_ref)
scoresM = data.frame(assoc = factor(col_ref), metabo_ids = factor(metabo_ids),
scores = scores)
## Do barplot
figure_barplot = ggplot(data = scoresM, aes(x = metabo_ids, y = scores, fill = assoc)) +
geom_bar(stat = "identity", position = position_dodge()) +
scale_fill_manual(values = scores_col_values) + theme_bw() +
labs(x = " ", y = ylab) + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.text = element_text(size = size_yaxis),
axis.text.x = element_text(angle = angle_names, hjust = 1,
size = size_names), axis.title = element_text(size = size_names),
axis.title.y = element_text(vjust = 0, size = size_ylab), axis.title.x = element_text(vjust = 0))
plot(figure_barplot)
}
MWAS_barplot(MWAS_adjusted2[,3],MWAS_adjusted2[,1],metabo_ids = colnames(target_metabolites),
size_ylab = 12)
MWAS_barplot(MWAS_adjusted2[,3],MWAS_adjusted2[,1],metabo_ids = colnames(target_metabolites),
size_ylab = 14)
MWAS_adjusted3 = MWAS_stats(target_metabolites, clinical_data[,3], CF_matrix = clinical_data[,-3],
assoc_method = "logistic", mt_method = "BH", output = "pvalues",
metabo_ids = colnames(target_metabolites))
MWAS_adjusted3
MWAS_barplot(MWAS_adjusted3[,3],MWAS_adjusted3[,1],metabo_ids = colnames(target_metabolites),
size_ylab = 40)
MWAS_barplot(MWAS_adjusted3[,3],MWAS_adjusted3[,1],metabo_ids = colnames(target_metabolites),
size_ylab = 12)
### MWAS_barplot ####
MWAS_barplot = function(pvalues, estimates, metabo_ids = NULL, alpha_th = 0.05,
scale_color = c("darkgray", "cornflowerblue", "firebrick1"),
legend_labs = c("unchanged", "downregulated", "upregulated"),
ylab = "sign*log(pval)", size_yaxis = 12, size_ylab = 12,
size_names = 10, angle_names = 45) {
# Check that input data are correct
if ((is.vector(pvalues) & is.vector(estimates)) == FALSE) {
stop("Arguments: pvalues and estimates, must be numeric vectors")
}
if (is.null(metabo_ids)) {
metabo_ids = paste("metabo", 1:length(pvalues), sep = "")
}
if (length(pvalues) != length(estimates) | length(pvalues) != length(metabo_ids)) {
stop("Aarguments: pvalues, estimates and metabo_ids, must have the same length")
}
## Get scores and color scale
scores = unlist(mapply(SK_scores, pvalues, estimates, SIMPLIFY = FALSE))
names(scores) = metabo_ids
scores_col = sapply(scores, SK_color, scale_color = scale_color, alpha_th = alpha_th)
col_ref = scores_col
col_ref[col_ref == scale_color[1]] = legend_labs[1]
col_ref[col_ref == scale_color[2]] = legend_labs[2]
col_ref[col_ref == scale_color[3]] = legend_labs[3]
scores_col_values = unique(scores_col)
names(scores_col_values) = unique(col_ref)
scoresM = data.frame(assoc = factor(col_ref), metabo_ids = factor(metabo_ids),
scores = scores)
## Do barplot
figure_barplot = ggplot(data = scoresM, aes(x = metabo_ids, y = scores, fill = assoc)) +
geom_bar(stat = "identity", position = position_dodge()) +
scale_fill_manual(values = scores_col_values) + theme_bw() +
labs(x = " ", y = ylab) + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.text = element_text(size = size_yaxis),
axis.text.x = element_text(angle = angle_names, hjust = 1,
size = size_names), axis.title = element_text(size = size_names, vjust = 0 ))
plot(figure_barplot)
}
MWAS_barplot(MWAS_adjusted3[,3],MWAS_adjusted3[,1],metabo_ids = colnames(target_metabolites),
size_ylab = 12)
### MWAS_SigSpecNMR ####
MWAS_spectrumNMR = function(metabo_vector, ppm, pvalues, estimates,
alpha_th = 0.05, xlab = "ppm", ylab = "intensity",
scale_color = c("black", "cornflowerblue", "firebrick1"),
size_lab = 12, size_axis = 12, xlim = NULL, ylim = NULL,
guide_type = "legend", xbreaks = waiver(), xnames = waiver(),
ybreaks = waiver(), ynames = waiver()) {
## Check that the input data are correct
if ((is.vector(pvalues) & is.vector(estimates) & is.vector(ppm) &
is.vector(metabo_vector)) == FALSE) {
stop("Arguments: metabo_vector, pvalues, estimates and ppm, must be numeric vectors")
}
if (length(pvalues) != length(estimates) | length(pvalues) !=
length(ppm) | length(pvalues) != length(metabo_vector)) {
stop("Arguments: metabo_vector, pvalues, estimates and ppm, must have the same length")
}
if (length(scale_color) != 3) {
stop("scale_color must have 3 color values")
}
scores = unlist(mapply(SK_scores, pvalues, estimates, SIMPLIFY = FALSE))
assoc = as.numeric(sapply(scores, sig_color, alpha_th = alpha_th))
nb = sort(as.numeric(unique(assoc)), decreasing = FALSE)
legend_labels = as.character(nb)
legend_labels[legend_labels == "0"] = "unchanged"
legend_labels[legend_labels == "1"] = "downregulated"
legend_labels[legend_labels == "2"] = "upregulated"
col_breaks = nb
col_breaks[col_breaks == 0] = scale_color[1]
col_breaks[col_breaks == 1] = scale_color[2]
col_breaks[col_breaks == 2] = scale_color[3]
# Plot spectrum
options(warn = -1)
figure_spectrum = qplot(ppm, metabo_vector, geom = "line",
colour = assoc) + scale_colour_gradientn(colours = col_breaks,
breaks = nb, space = "Lab", guide = guide_type, labels = legend_labels) +
scale_x_reverse(lim = xlim, breaks = xbreaks, labels = xnames) +
scale_y_continuous(lim = ylim, breaks = ybreaks, labels = ynames) +
theme_bw() + labs(x = xlab, y = ylab) + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.text = element_text(size = size_axis),
axis.title = element_text(size = size_lab, vjust = 0))
plot(figure_spectrum)
options(warn = 1)
}
MWAS_spectrumNMR(QC_data[1,], ppm, MWAS_unadjusted[,3], MWAS_unadjusted[,1])
MWAS_adjusted3 = MWAS_stats(metabolic_data, clinical_data[,3], CF_matrix = clinical_data[,-3],
assoc_method = "logistic", mt_method = "BH", output = "pvalues",
metabo_ids = colnames(metabolic_data))
MWAS_T2D_adjBMI = MWAS_stats(metabolic_data, clinical_data[,3], CF_matrix = clinical_data[,-3],
assoc_method = "logistic", mt_method = "BH", output = "pvalues",
metabo_ids = colnames(metabolic_data))
MWAS_skylineNMR (MWAS_T2D_adjBMI[,3], MWAS_T2D_adjBMI[,1], ppm)
leu = grep(0.954, ppm, fixed = TRUE)[1]
val = grep(1.0399, ppm, fixed = TRUE)[1]
ile = grep(1.007, ppm, fixed = TRUE)[1]
mannose = grep(5.183, ppm, fixed = TRUE) [1]
lactate = grep(4.12, ppm, fixed = TRUE) [1]
ala = grep(1.477, ppm, fixed = TRUE) [1]
buty = grep(1.199, ppm, fixed = TRUE) [1]
tyr = grep(7.184, ppm, fixed = TRUE) [1]
target_metabolites = metabolic_data[,c(leu,val,ile,mannose,lactate,ala,buty,tyrosine)]
colnames(target_metabolites) = c("leucine","valine","isoleucine","mannose","lactate","alanine","3OH-butyrate", "tyrosine")
target_metabolites = metabolic_data[,c(leu,val,ile,mannose,lactate,ala,buty,tyr)]
colnames(target_metabolites) = c("leucine","valine","isoleucine","mannose","lactate","alanine","3OH-butyrate", "tyrosine")
save(target_metabolites, file = "target_metabolites.rda")
load("target_metabolites.rda")
MWAS_T2D_target = MWAS_stats(target_metabolites, clinical_data[,3], CF_matrix = clinical_data[,-3],
assoc_method = "logistic", mt_method = "BH", output = "pvalues",
metabo_ids = colnames(target_metabolites))
MWAS_barplot(MWAS_T2D_target[,3],MWAS_T2D_target[,1],metabo_ids = colnames(target_metabolites),
size_ylab = 12)
target_metabolites
### MWAS_barplot ####
MWAS_barplot = function(pvalues, estimates, metabo_ids = NULL, alpha_th = 0.05,
scale_color = c("darkgray", "cornflowerblue", "firebrick1"),
legend_labs = c("unchanged", "downregulated", "upregulated"),
ylab = "sign*log(pval)", size_yaxis = 12, size_ylab = 12,
size_names = 10, angle_names = 45) {
# Check that input data are correct
if ((is.vector(pvalues) & is.vector(estimates)) == FALSE) {
stop("Arguments: pvalues and estimates, must be numeric vectors")
}
if (is.null(metabo_ids)) {
metabo_ids = paste("metabo", 1:length(pvalues), sep = "")
}
if (length(pvalues) != length(estimates) | length(pvalues) != length(metabo_ids)) {
stop("Aarguments: pvalues, estimates and metabo_ids, must have the same length")
}
## Get scores and color scale
scores = unlist(mapply(SK_scores, pvalues, estimates, SIMPLIFY = FALSE))
names(scores) = metabo_ids
scores_col = sapply(scores, SK_color, scale_color = scale_color, alpha_th = alpha_th)
col_ref = scores_col
col_ref[col_ref == scale_color[1]] = legend_labs[1]
col_ref[col_ref == scale_color[2]] = legend_labs[2]
col_ref[col_ref == scale_color[3]] = legend_labs[3]
scores_col_values = unique(scores_col)
names(scores_col_values) = unique(col_ref)
scoresM = data.frame(assoc = factor(col_ref), metabo_ids = factor(metabo_ids),
scores = scores)
## Do barplot
figure_barplot = ggplot(data = scoresM, aes(x = metabo_ids, y = scores, fill = assoc)) +
geom_bar(stat = "identity", position = position_dodge()) +
scale_x_discrete(limits = metabo_ids) +
scale_fill_manual(values = scores_col_values) + theme_bw() +
labs(x = " ", y = ylab) + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.text = element_text(size = size_yaxis),
axis.text.x = element_text(angle = angle_names, hjust = 1,
size = size_names), axis.title = element_text(size = size_names, vjust = 0 ))
plot(figure_barplot)
}
MWAS_barplot(MWAS_T2D_target[,3],MWAS_T2D_target[,1],metabo_ids = colnames(target_metabolites),
size_ylab = 12)
AG = grep(3.3439, ppm, fixed = TRUE) [1]
leu = grep(0.954, ppm, fixed = TRUE)[1]
val = grep(1.0399, ppm, fixed = TRUE)[1]
ile = grep(1.007, ppm, fixed = TRUE)[1]
mannose = grep(5.183, ppm, fixed = TRUE) [1]
lactate = grep(4.12, ppm, fixed = TRUE) [1]
ala = grep(1.477, ppm, fixed = TRUE) [1]
buty = grep(1.199, ppm, fixed = TRUE) [1]
tyr = grep(7.184, ppm, fixed = TRUE) [1]
AG = grep(3.3439, ppm, fixed = TRUE) [1]
target_metabolites = metabolic_data[,c(lactate, buty, leu,val,ile,mannose,tyr, ala, AG)]
colnames(target_metabolites) = c("lactate", "3OH-butyrate","leucine","valine",
"isoleucine","mannose","tyrosine","alanine","1,5-AG")
save(target_metabolites, file = "target_metabolites.rda")
MWAS_T2D_adjBMI = MWAS_stats(metabolic_data, clinical_data[,3], CF_matrix = clinical_data[,-3],
assoc_method = "logistic", mt_method = "BH", output = "pvalues",
metabo_ids = colnames(metabolic_data))
MWAS_T2D_target = MWAS_stats(target_metabolites, clinical_data[,3], CF_matrix = clinical_data[,-3],
assoc_method = "logistic", mt_method = "BH", output = "pvalues",
metabo_ids = colnames(target_metabolites))
leu = grep(0.954, ppm, fixed = TRUE)[1]
val = grep(1.0399, ppm, fixed = TRUE)[1]
ile = grep(1.007, ppm, fixed = TRUE)[1]
mannose = grep(5.183, ppm, fixed = TRUE) [1]
lactate = grep(4.12, ppm, fixed = TRUE) [1]
ala = grep(1.477, ppm, fixed = TRUE) [1]
buty = grep(1.199, ppm, fixed = TRUE) [1]
tyr = grep(7.184, ppm, fixed = TRUE) [1]
AG = grep(3.3439, ppm, fixed = TRUE) [1]
target_metabolites = metabolic_data[,c(lactate, buty, leu,val,ile,mannose,tyr, ala, AG)]
target_metabolites
AG
AG = grep(3.2726, ppm, fixed = TRUE) [1]
AG
length(AG)
is.na(AG)
AG = grep(3.2726, ppm, fixed = TRUE) [1]
AG
AG = grep(3.272, ppm, fixed = TRUE) [1]
AG
## leu
leu = grep(0.954, ppm, fixed = TRUE)[1]
val = grep(1.0399, ppm, fixed = TRUE)[1]
ile = grep(1.007, ppm, fixed = TRUE)[1]
mannose = grep(5.183, ppm, fixed = TRUE) [1]
lactate = grep(4.12, ppm, fixed = TRUE) [1]
ala = grep(1.477, ppm, fixed = TRUE) [1]
buty = grep(1.199, ppm, fixed = TRUE) [1]
tyr = grep(7.184, ppm, fixed = TRUE) [1]
AG = grep(3.272, ppm, fixed = TRUE) [1]
target_metabolites = metabolic_data[,c(lactate, buty, leu,val,ile,mannose,tyr, ala, AG)]
colnames(target_metabolites) = c("lactate", "3OH-butyrate","leucine","valine",
"isoleucine","mannose","tyrosine","alanine","1,5-AG")
save(target_metabolites, file = "target_metabolites.rda")
MWAS_T2D_target = MWAS_stats(target_metabolites, clinical_data[,3], CF_matrix = clinical_data[,-3],
assoc_method = "logistic", mt_method = "BH", output = "pvalues",
metabo_ids = colnames(target_metabolites))
MWAS_barplot(MWAS_T2D_target[,3],MWAS_T2D_target[,1],metabo_ids = colnames(target_metabolites),
size_ylab = 12)
### MWAS_barplot ####
MWAS_barplot = function(pvalues, estimates, metabo_ids = NULL, alpha_th = 0.05,
scale_color = c("darkgray", "cornflowerblue", "firebrick1"),
legend_labs = c("unchanged", "downregulated", "upregulated"),
ylab = "sign*log(pval)", size_yaxis = 12, size_ylab = 12,
size_names = 10, angle_names = 45, sort = TRUE) {
# Check that input data are correct
if ((is.vector(pvalues) & is.vector(estimates)) == FALSE) {
stop("Arguments: pvalues and estimates, must be numeric vectors")
}
if (is.null(metabo_ids)) {
metabo_ids = paste("metabo", 1:length(pvalues), sep = "")
}
if (length(pvalues) != length(estimates) | length(pvalues) != length(metabo_ids)) {
stop("Aarguments: pvalues, estimates and metabo_ids, must have the same length")
}
## Get scores and color scale
scores = unlist(mapply(SK_scores, pvalues, estimates, SIMPLIFY = FALSE))
names(scores) = metabo_ids
scores_col = sapply(scores, SK_color, scale_color = scale_color, alpha_th = alpha_th)
col_ref = scores_col
col_ref[col_ref == scale_color[1]] = legend_labs[1]
col_ref[col_ref == scale_color[2]] = legend_labs[2]
col_ref[col_ref == scale_color[3]] = legend_labs[3]
scores_col_values = unique(scores_col)
names(scores_col_values) = unique(col_ref)
scoresM = data.frame(assoc = factor(col_ref), metabo_ids = factor(metabo_ids),
scores = scores)
## Set positions
if(sort == TRUE){
positions = names(sort(scores))
} else{
positions = names(scores)
}
## Do barplot
figure_barplot = ggplot(data = scoresM, aes(x = metabo_ids, y = scores, fill = assoc)) +
geom_bar(stat = "identity", position = position_dodge()) +
scale_x_discrete(limits = positions) +
scale_fill_manual(values = scores_col_values) + theme_bw() +
labs(x = " ", y = ylab) + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.text = element_text(size = size_yaxis),
axis.text.x = element_text(angle = angle_names, hjust = 1,
size = size_names), axis.title = element_text(size = size_names, vjust = 0 ))
plot(figure_barplot)
}
MWAS_barplot(MWAS_T2D_target[,3],MWAS_T2D_target[,1],metabo_ids = colnames(target_metabolites),
size_ylab = 12)
